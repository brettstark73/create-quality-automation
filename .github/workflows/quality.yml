name: Quality Checks

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            echo "No package-lock.json found; running npm install"
            npm install
          fi

      - name: Prettier check
        run: npm run format:check

      - name: ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx,.html --max-warnings=0

      - name: Stylelint
        run: npx stylelint "**/*.{css,scss,sass,less,pcss}" --allow-empty-input

      - name: Security audit
        run: npm audit --audit-level high

      - name: Check for hardcoded secrets
        run: |
          # Check for common secret patterns (excluding workflow files)
          if grep -r -E "(password|secret|key|token).*[=:].*['\"][^'\"]{8,}" . --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=.github || \
             grep -r -E "-----BEGIN.*KEY-----" . --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=.github; then
            echo "‚ùå Potential hardcoded secrets found"
            exit 1
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi

      - name: Security pattern detection
        run: |
          # Check for XSS vulnerability patterns from WFHroulette
          echo "üîç Scanning for XSS vulnerability patterns..."

          # Check for innerHTML with interpolation (dangerous pattern)
          if grep -r -E "innerHTML.*\\\$\{" . --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules; then
            echo "‚ùå Potential XSS: innerHTML with template literal interpolation found"
            exit 1
          fi

          # Check for eval with interpolation
          if grep -r -E "eval\\\(.*\\\$\{" . --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules; then
            echo "‚ùå Potential code injection: eval with interpolation found"
            exit 1
          fi

          # Check for document.write with interpolation
          if grep -r -E "document\\\\.write.*\\\$\{" . --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules; then
            echo "‚ùå Potential XSS: document.write with interpolation found"
            exit 1
          fi

          # Check for onclick handlers with interpolation
          if grep -r -E "onclick.*=.*['\"].*\\\$\{" . --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" --include="*.html" --exclude-dir=node_modules; then
            echo "‚ùå Potential XSS: onclick handler with interpolation found"
            exit 1
          fi

          echo "‚úÖ No XSS vulnerability patterns detected"

      - name: Input validation check
        run: |
          # Check for proper input validation patterns
          echo "üîç Checking for input validation patterns..."

          # Set pipefail to catch grep failures properly
          set -o pipefail

          # Look for unvalidated user inputs in common patterns
          if grep -r -E "(req\\.query|req\\.params|req\\.body)\\.[a-zA-Z_][a-zA-Z0-9_]*[^\\.]" . --include="*.js" --include="*.ts" --exclude-dir=node_modules | grep -v -E "(trim|toLowerCase|toUpperCase|parseInt|parseFloat|Number\\.isNaN|String|Boolean)" > /tmp/unvalidated_inputs.txt 2>/dev/null && [ -s /tmp/unvalidated_inputs.txt ]; then
            echo "‚ö†Ô∏è Found potential unvalidated user inputs (review manually):"
            head -5 /tmp/unvalidated_inputs.txt
            echo "This is a warning, not a failure. Review these patterns manually."
          else
            echo "‚úÖ No unvalidated user inputs detected"
          fi

          # Clean up temp file
          rm -f /tmp/unvalidated_inputs.txt

      - name: Configuration security check
        run: |
          # Check for configuration security issues
          if [ -f "setup.js" ]; then
            echo "üîç Running configuration security validation..."
            node setup.js --security-config
          else
            echo "‚è≠Ô∏è No setup.js found, running basic security checks..."

            # Basic Next.js env block check
            if find . -name "next.config.*" -type f | head -1 | xargs grep -l "env:" 2>/dev/null; then
              echo "‚ö†Ô∏è Next.js env block found - manually verify no secrets are exposed to client"
            fi

            # Basic Vite env check
            if find . -name "vite.config.*" -type f | head -1 | xargs grep -l "VITE_.*SECRET\|VITE_.*PASSWORD\|VITE_.*KEY" 2>/dev/null; then
              echo "‚ùå VITE_ prefixed secrets detected - these are exposed to client!"
              exit 1
            fi
          fi

      - name: Documentation validation
        run: |
          # Validate documentation accuracy
          if [ -f "setup.js" ]; then
            echo "üìñ Running documentation validation..."
            node setup.js --validate-docs
          else
            echo "‚è≠Ô∏è No setup.js found, skipping documentation validation"
          fi

      - name: Lighthouse CI
        run: |
          # Only run Lighthouse CI if configuration exists
          if [ -f ".lighthouserc.js" ] || [ -f ".lighthouserc.json" ] || [ -f "lighthouserc.js" ]; then
            echo "üö¢ Running Lighthouse CI..."
            npx lhci autorun
          else
            echo "‚è≠Ô∏è No Lighthouse CI configuration found, skipping"
          fi
        continue-on-error: true
